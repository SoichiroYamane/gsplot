name: GitHub Pages

on:
  push:
    branches: ["main"]

  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Upgrade pip and setuptools
        run: |
          pip install --upgrade pip setuptools

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2.2.0

      - name: Clear Poetry cache
        run: |
          poetry cache clear --all pypi
          poetry cache clear --all virtualenvs

      - name: Install dependencies
        run: poetry install --no-root

      - name: Install gsplot locally
        run: |
          poetry run pip install -e .

      # - name: Run demos
      #   run: |
      #     find demo -name "*.py" | while read file; do
      #       echo "Running $file"
      #       cd "$(dirname "$file")"  # change directory to the script's directory
      #       poetry run python "$(basename "$file")"  # run the script
      #       cd - > /dev/null  # change back to the original directory
      #     done

      - name: Build with Sphinx
        run: |
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          poetry run make -C docs clean
          # poetry run make -C docs html
          poetry run make -C docs multiversion


      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site



      - name: Clean _site directory
        run: |
          sudo chmod -R 777 ./_site
          find ./_site -type f -name "README.md" -delete

      # - name: Combine Sphinx and Jekyll Outputs
      #   run: |
      #     sudo mkdir -p ./_site/docs
      #     cp -r ./docs/_build/html/* ./_site/docs/

      # - name: Combine Sphinx Outputs
      #   run: |
      #     for version_dir in ./docs/_build/html/*; do
      #       if [ -d "$version_dir" ]; then
      #         version_name=$(basename "$version_dir")
      #         mkdir -p "./_site/docs/$version_name"
      #         cp -r "$version_dir"/* "./_site/docs/$version_name/"
      #       fi
      #     done
      - name: Combine Sphinx Outputs
        run: |
          for version_dir in ./docs/_build/*; do
            if [ -d "$version_dir" ]; then
              version_name=$(basename "$version_dir")
              mkdir -p "./_site/$version_name"
              cp -r "$version_dir"/* "./_site/$version_name/"
            fi
          done

      - name: Upload combined output as GitHub Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

      # - name: Upload combined output as GitHub Pages artifact
      #   uses: actions/upload-pages-artifact@v3
      #   with:
      #     path: ./_site/docs

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
